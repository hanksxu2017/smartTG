<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap SYSTEM "./mapsql.dtd">
<sqlMap>

    <!-- 这里面只支持SQL语句，不支持HQL语句的执行-->
    
    <!-- SQL语句-->
    <!-- 菜单列表树 -->
    <sqlUnit name="select_study_school_list">
        <sql>
            select t.id, t.name, t.address
            from tg_study_school t order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="select_study_teacher_list">
        <sql>
            select t.id, t.name, t.phone, date_format(t.create_time, '%Y-%c-%d'),
            (SELECT COUNT(c1.id) FROM tg_study_course c1 WHERE c1.teacher_id = t.id AND c1.status = 'NORMAL'),
            (SELECT COUNT(DISTINCT rel1.student_id) FROM tg_study_student_course_rel rel1 WHERE rel1.status = 'NORMAL' and rel1.course_id IN (SELECT c2.id FROM tg_study_course c2 WHERE c2.teacher_id = t.id)),
            (SELECT COUNT(rel2.id) FROM tg_study_student_course_rel rel2 WHERE rel2.status = 'NORMAL' and rel2.course_id IN (SELECT c3.id FROM tg_study_course c3 WHERE c3.teacher_id = t.id))
            from tg_study_teacher t
            order by t.create_time asc
        </sql>
    </sqlUnit>
    <!-- 教师简单列表 -->
    <sqlUnit name="teacher_simp_list">
        <sql>
            select t.id, t.name, t.level from tg_study_teacher t
            [ where t.name like '%:name%']
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="classroom_list">
        <sql>
            select t.id, t.school_name, t.name, t.description, t.create_time from tg_study_classroom t
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="select_study_class_list">
        <sql>
            select t.id, t.name, t.teacher_name, t.level, t.description, t.create_time from tg_study_class t
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <!-- 学生 -->
    <sqlUnit name="student_list">
        <sql>
            select t.id, t.name, if(t.sex = 1, "男生", "女生"), t.birthday, t.school_name, t.parent_phone,
            t.level,
            CASE t.status WHEN 'NORMAL' THEN '正常'
            WHEN 'DROP_OUT' THEN '退学'
            WHEN 'TEMP_LEAVE' THEN "休学"
            ELSE '未定义' END,
            t.remain_course, date_format(t.create_time, '%Y-%c-%d'),
            CASE t.is_register WHEN 'YES' THEN '已注册'
            ELSE '未注册' END, description
            from tg_study_student t
            where 1=1
            [and t.name like '%:name%']
            [and t.status =:status]
            order by t.create_time desc
        </sql>
    </sqlUnit>
    <!-- 学生简单列表 -->
    <sqlUnit name="student_simp_list">
        <sql>
            select t.id, t.name, t.level, t.remain_course, date_format(t.create_time, '%Y-%c-%d')
            from tg_study_student t
            where t.status = 'NORMAL'
            [ and t.name like '%:name%']
            order by t.remain_course asc
        </sql>
    </sqlUnit>


    <!-- 课时 -->
    <sqlUnit name="select_course_list">
        <sql>
            select t.id,
            CASE t.week_info WHEN '7' THEN '星期天'
            WHEN '1' THEN '星期一'
            WHEN '2' THEN '星期二'
            WHEN '3' THEN '星期三'
            WHEN '4' THEN '星期四'
            WHEN '5' THEN '星期五'
            WHEN '6' THEN '星期六'
            ELSE '未设置' END,
            t.course_time, t.name, t.classroom_name, t.teacher_name,
            (select count(student_id) from tg_study_student_course_rel where course_id = t.id)
            from tg_study_course t
            where t.status = 'NORMAL'
            [and t.teacher_id =:teacherId]
            [and t.week_info =:weekInfo]
            order by t.week_info,t.name
        </sql>
    </sqlUnit>
    <!-- 教师的课时信息 -->
    <sqlUnit name="teacher_course_list">
        <sql>
            SELECT temp.id,
                temp.name,
                temp.week_info,
                temp.course_time,
                temp.classroom_name,
                (SELECT COUNT(rel.id) AS studentCount FROM tg_study_student_course_rel rel WHERE rel.course_id = temp.id AND rel.status = 'NORMAL')
            FROM (
                SELECT t.id,
                    t.name,
                    CASE t.week_info WHEN '7' THEN '星期天'
                        WHEN '1' THEN '星期一'
                        WHEN '2' THEN '星期二'
                        WHEN '3' THEN '星期三'
                        WHEN '4' THEN '星期四'
                        WHEN '5' THEN '星期五'
                        WHEN '6' THEN '星期六'
                        ELSE '未设置' END AS week_info,
                    t.course_time,
                    t.classroom_name,
                    CASE t.status WHEN "NORMAL" THEN '正常'
                        ELSE '未定义' END AS STATUS,
                    t.create_time,
                    t.description
                FROM tg_study_course t
                WHERE t.teacher_id =:id
                    and t.status != 'DELETE'
                    [and t.name like '%:courseName%']
                ORDER BY t.week_info, t.course_time_index) temp
        </sql>
    </sqlUnit>
    <sqlUnit name="teacher_course_weeks">
        <sql>
            SELECT * FROM (
            select DISTINCT t.week_info
            from tg_study_course t
            where t.teacher_id =:teacherId) temp ORDER BY temp.week_info
        </sql>
    </sqlUnit>
    <!-- 课时的学生列表 -->
    <sqlUnit name="course_student_list">
        <sql>
            select t.id, t.name, t.level, t.remain_course, t.create_time,
            CASE rel.status WHEN 'NORMAL' THEN '正常'
            WHEN 'EXIT_COURSE' THEN '已退班'
            ELSE '未定义' END
            from tg_study_student t, tg_study_student_course_rel rel
            where t.id = rel.student_id
            and rel.course_id = :id
            [and rel.status =:status]
            [and t.name like '%:studentName%']
            order by t.remain_course, rel.status
        </sql>
    </sqlUnit>
    <!-- 学生已选的课时信息 -->
    <sqlUnit name="student_course_list">
        <sql>
            select t.id, t.name,
            CASE t.week_info WHEN '7' THEN '星期天'
            WHEN '1' THEN '星期一'
            WHEN '2' THEN '星期二'
            WHEN '3' THEN '星期三'
            WHEN '4' THEN '星期四'
            WHEN '5' THEN '星期五'
            WHEN '6' THEN '星期六'
            ELSE '未设置' END,
            t.course_time, t.classroom_name, t.teacher_name,
            CASE rel.status WHEN "NORMAL" THEN '正常'
            WHEN 'EXIT_COURSE' THEN '已退班'
            ELSE '未定义' END,
            CASE rel.sign_type WHEN "NORMAL" THEN '正常签到'
            WHEN 'SIGN_AS_HAS' THEN '到班签到'
            ELSE '未定义' END
            from tg_study_course t, tg_study_student_course_rel rel
            where rel.student_id =:id and rel.course_id = t.id
            [and rel.status =:status]
            [and rel.student_name like '%:studentName%']
            order by t.week_info, t.course_time_index
        </sql>
    </sqlUnit>

    <sqlUnit name="select_study_class_rel_list">
        <sql>
            select t.id, t.student_name, t.class_name, t.teacher_name, t.status, t.create_time
            from tg_study_student_class_rel t
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="select_study_course_rel_list">
        <sql>
            select t.id,
            CASE t.course_week_info WHEN '7' THEN '星期天'
            WHEN '1' THEN '星期一'
            WHEN '2' THEN '星期二'
            WHEN '3' THEN '星期三'
            WHEN '4' THEN '星期四'
            WHEN '5' THEN '星期五'
            WHEN '6' THEN '星期六'
            ELSE '未设置' END, t.course_time, t.student_name,t.class_name, t.classroom_name, t.teacher_name, t.status, t.create_time
            from tg_study_student_course_rel t
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="course_record_list">
        <sql>
            select t.id, t.course_date, t.course_time, t.teacher_name, t.classroom_name,
            t.student_quantity_plan, t.student_quantity_actual, t.student_personal_leave, t.play_truant,
            t.student_other_absent, t.status, t.create_time, t.description
            from tg_study_course_record t
            order by t.create_time asc
        </sql>
    </sqlUnit>

    <sqlUnit name="select_study_course_student_record_list">
        <sql>
            select t.id, sr.student_name, t.course_date, t.course_time, t.class_name, t.classroom_name, t.teacher_name,
            CASE sr.status WHEN "NORMAL" THEN '正常'
            ELSE '未定义' END ,
            sr.description, sr.update_time
            from tg_study_course_record t, tg_study_course_student_record sr
            where t.id = sr.course_record_id
            order by t.create_time asc
        </sql>
    </sqlUnit>
    <!-- 每周课时简单列表 -->
    <sqlUnit name="courseRecord_simp_list">
        <sql>
            select t.id, concat(t.course_date, ' ', t.course_time), t.course_name,
            CASE t.status WHEN 'NORMAL' THEN '未结课'
            WHEN 'NORMAL_END' THEN '已结课'
            ELSE '未定义' END
            from tg_study_course_record t
            where DATE_FORMAT(t.course_date,'%Y-%m-%d') =:selectCourseDate
            <!--and YEARWEEK(DATE_FORMAT(t.course_date,'%Y-%m-%d')) = YEARWEEK(NOW())-->
            [and t.teacher_id =:teacherId]
            order by t.status, t.course_date
        </sql>
    </sqlUnit>
    <!-- 每周课时关联的学生列表 -->
    <sqlUnit name="courseRecord_student_list">
        <sql>
            select t.id, t.name, t.level, t.remain_course,
            CASE record.status WHEN 'NORMAL' THEN '正常'
            WHEN 'SIGNED' THEN '已签到'
            WHEN 'PERSONAL_LEAVE' THEN '请假'
            WHEN 'PLAY_TRUANT' THEN '缺课'
            WHEN 'CANCEL_AS_EXIT' THEN '退班'
            WHEN 'X_MAKE_UP' THEN '补课'
            ELSE '未定义' END
            from tg_study_student t, tg_study_course_student_record record
            where t.id = record.student_id
            and record.course_record_id = :courseRecordId
            [and t.name like '%:studentName%']
            order by record.status, t.remain_course
        </sql>
    </sqlUnit>
    <!-- 系统通知 -->
    <sqlUnit name="system_message_list">
        <sql>
            select t.id,
            CASE t.message_type WHEN 'STUDENT_ABSENT_NOTE' THEN '连续缺课提醒'
            WHEN 'STUDENT_REMAIN_COURSE_NOTE' THEN '续费提醒'
            WHEN 'COURSE_UN_SIGNED_NOTE' THEN '课时未结课提醒'
            ELSE '未定义' END,
            t.message_content,
            CASE t.is_process WHEN 'NO' THEN '未处理'
            WHEN 'YES' THEN '已处理'
            ELSE '未定义' END,
            t.create_time, t.process_time, t.process_desc
            from tg_study_system_message t
            order by t.is_process, t.level desc, t.create_time desc
        </sql>
    </sqlUnit>
    <sqlUnit name="student_has_absent_course_list">
        <sql>
            SELECT student.id, student.name, student.level
            FROM tg_study_student student
            WHERE student.status = 'NORMAL'
            [AND student.name LIKE '%:name%']
            AND student.id IN (
                SELECT DISTINCT t.student_id
                FROM tg_study_course_student_record t
                WHERE t.course_id !=:courseId
                AND (t.status = 'PERSONAL_LEAVE' OR t.status = 'PLAY_TRUANT'))
        </sql>
    </sqlUnit>
    <sqlUnit name="student_has_absent_count">
        <sql>
            select count(t.course_record_id)
            from tg_study_course_student_record t
            where t.student_id=:studentId
            AND (t.status = 'PERSONAL_LEAVE' OR t.status = 'PLAY_TRUANT')
        </sql>
    </sqlUnit>
    <sqlUnit name="student_absent_course_record_list">
        <sql>
            select rec.id, rec.course_name, t.status, rec.course_date, rec.course_time
            from tg_study_course_student_record t, tg_study_course_record rec
            where
            t.course_record_id = rec.id
            and (t.status = 'PERSONAL_LEAVE' OR t.status = 'PLAY_TRUANT')
            and t.student_id =:studentId
            order by rec.course_date desc
        </sql>
    </sqlUnit>
    <sqlUnit name="course_record_student_list">
        <sql>
            select t.student_id, t.student_name
            from tg_study_course_student_record t
            where t.create_time &lt; NOW()
            and t.status != 'CANCEL_AS_EXIT'
            and t.course_record_id=:courseRecordId
        </sql>
    </sqlUnit>

    <!-- 续费记录 -->
    <sqlUnit name="renew_record_list">
        <sql>
            select t.id, t.student_name, t.amount, t.course_count, t.operator_full_name, t.create_time, t.description
            from tg_study_renew_record t
            where 1=1
            [and t.student_name like '%:studentName%']
            order by t.create_time desc
        </sql>
    </sqlUnit>

    <!-- 教室租赁信息 -->
    <sqlUnit name="classroom_rental_list">
        <sql>
            select
            t.id, t.name, t.tenant_name, t.tenant_phone,
            CASE t.week_info WHEN '7' THEN '星期天'
            WHEN '1' THEN '星期一'
            WHEN '2' THEN '星期二'
            WHEN '3' THEN '星期三'
            WHEN '4' THEN '星期四'
            WHEN '5' THEN '星期五'
            WHEN '6' THEN '星期六'
            ELSE '未定义' END, t.course_time, t.classroom_name,
            CASE t.status WHEN 'NORMAL' THEN '正常'
            WHEN 'CANCEL' THEN '取消'
            WHEN 'EXPIRE' THEN '到期'
            ELSE '未定义' END, t.end_date, DATE_FORMAT(t.create_time,'%Y-%m-%d'), t.description
            from tg_study_classroom_rental t
            where t.status = 'NORMAL'
            order by t.create_time desc
        </sql>
    </sqlUnit>

    <!-- ######################################教师统计###################################### -->
    <sqlUnit name="statistics_teacher_list">
        <sql>
            select t.id, t.month, t.teacher_name,
            t.course_count, t.student_count, t.course_record_count, t.course_record_student_count,
            t.exit_course_count, t.drop_out_count,
            concat(t.exit_course_rate, '%'),
            concat(t.drop_out_rate, '%'),
            DATE_FORMAT(t.create_time,'%Y-%m-%d')
            from tg_study_statistics_teacher t
            where month =:month
            [and t.teacher_id =:teacherId]
            order by t.course_count
        </sql>
    </sqlUnit>


    <!-- 带班数 -->
    <sqlUnit name="st_course_count">
        <sql>
            select count(t.id) from tg_study_course t
            where t.teacher_id =:teacherId
            and t.status = 'NORMAL'
        </sql>
    </sqlUnit>

    <!-- 带班学生在班数 -->
    <sqlUnit name="st_student_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
            and t.status = 'NORMAL'
        </sql>
    </sqlUnit>

    <!-- 课时数 -->
    <sqlUnit name="st_course_record_count">
        <sql>
            select count(t.id) from tg_study_course_record t
            where t.teacher_id =:teacherId and t.status = 'NORMAL_END'
            and LEFT(t.course_date, 7) = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')
        </sql>
    </sqlUnit>

    <!-- 课时学生人次数 -->
    <sqlUnit name="st_course_record_student_count">
        <sql>
            select count(t.id) from tg_study_course_student_record t
            where (t.status = 'SIGNED' or t.status = 'X_MAKE_UP')
            and t.course_record_id in (
                select rec.id from tg_study_course_record rec
                where rec.teacher_id =:teacherId and rec.status = 'NORMAL_END'
                and LEFT(rec.course_date, 7) = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')
            )
        </sql>
    </sqlUnit>

    <!-- 带班学生退班数 -->
    <sqlUnit name="st_exit_course_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.status = 'EXIT_COURSE'
            and LEFT(t.update_time, 7) = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')
            and t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
        </sql>
    </sqlUnit>

    <!-- 带班学生退学数 -->
    <sqlUnit name="st_drop_out_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.status = 'EXIT_COURSE'
            and LEFT(t.update_time, 7) = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')
            and t.student_id in (select stu.id from tg_study_student stu where stu.status = 'DROP_OUT')
            and t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
        </sql>
    </sqlUnit>

    <!-- 带班学生在班新入学数 -->
    <sqlUnit name="st_new_student_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.status = 'NORMAL'
            and t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
            and t.student_id in (select stu.id from tg_study_student stu
                where date_format(stu.create_time, '%Y %m') = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y %m'))
        </sql>
    </sqlUnit>

    <!-- 带班学生退班新入学数 -->
    <sqlUnit name="st_new_student_exit_course_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.status = 'EXIT_COURSE'
            and t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
            and t.student_id in (select stu.id from tg_study_student stu
                where date_format(stu.create_time, '%Y %m') = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y %m'))
        </sql>
    </sqlUnit>

    <!-- 带班学生退学新入学数 -->
    <sqlUnit name="st_new_student_drop_out_count">
        <sql>
            select count(distinct t.student_id) from tg_study_student_course_rel t
            where t.status = 'EXIT_COURSE'
            and t.course_id in (select course.id from tg_study_course course where course.teacher_id =:teacherId)
            and t.student_id in (select stu.id from tg_study_student stu
                where stu.status = 'DROP_OUT' and date_format(stu.create_time, '%Y %m') = date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y %m'))
        </sql>
    </sqlUnit>

</sqlMap>